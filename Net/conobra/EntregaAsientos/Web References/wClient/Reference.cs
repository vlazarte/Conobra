//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SmartQuickbook.wClient {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WServiceSoap", Namespace="http://tempuri.org/")]
    public partial class WService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback doQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback importFromCsvOperationCompleted;
        
        private System.Threading.SendOrPostCallback addRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback edditRecordOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WService() {
            this.Url = global::SmartQuickbook.Properties.Settings.Default.SmartQuickbook_wClient_WService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event doQueryCompletedEventHandler doQueryCompleted;
        
        /// <remarks/>
        public event importFromCsvCompletedEventHandler importFromCsvCompleted;
        
        /// <remarks/>
        public event addRecordCompletedEventHandler addRecordCompleted;
        
        /// <remarks/>
        public event edditRecordCompletedEventHandler edditRecordCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/doQuery", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string doQuery(string id, string[] paramethers, out string err) {
            object[] results = this.Invoke("doQuery", new object[] {
                        id,
                        paramethers});
            err = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void doQueryAsync(string id, string[] paramethers) {
            this.doQueryAsync(id, paramethers, null);
        }
        
        /// <remarks/>
        public void doQueryAsync(string id, string[] paramethers, object userState) {
            if ((this.doQueryOperationCompleted == null)) {
                this.doQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoQueryOperationCompleted);
            }
            this.InvokeAsync("doQuery", new object[] {
                        id,
                        paramethers}, this.doQueryOperationCompleted, userState);
        }
        
        private void OndoQueryOperationCompleted(object arg) {
            if ((this.doQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doQueryCompleted(this, new doQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/importFromCsv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool importFromCsv(string id, string csv, out string err) {
            object[] results = this.Invoke("importFromCsv", new object[] {
                        id,
                        csv});
            err = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void importFromCsvAsync(string id, string csv) {
            this.importFromCsvAsync(id, csv, null);
        }
        
        /// <remarks/>
        public void importFromCsvAsync(string id, string csv, object userState) {
            if ((this.importFromCsvOperationCompleted == null)) {
                this.importFromCsvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnimportFromCsvOperationCompleted);
            }
            this.InvokeAsync("importFromCsv", new object[] {
                        id,
                        csv}, this.importFromCsvOperationCompleted, userState);
        }
        
        private void OnimportFromCsvOperationCompleted(object arg) {
            if ((this.importFromCsvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.importFromCsvCompleted(this, new importFromCsvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addRecord", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addRecord(string id, string[] list, out string err) {
            object[] results = this.Invoke("addRecord", new object[] {
                        id,
                        list});
            err = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addRecordAsync(string id, string[] list) {
            this.addRecordAsync(id, list, null);
        }
        
        /// <remarks/>
        public void addRecordAsync(string id, string[] list, object userState) {
            if ((this.addRecordOperationCompleted == null)) {
                this.addRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddRecordOperationCompleted);
            }
            this.InvokeAsync("addRecord", new object[] {
                        id,
                        list}, this.addRecordOperationCompleted, userState);
        }
        
        private void OnaddRecordOperationCompleted(object arg) {
            if ((this.addRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addRecordCompleted(this, new addRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/edditRecord", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool edditRecord(string id, string[] list, int recordID, out string err) {
            object[] results = this.Invoke("edditRecord", new object[] {
                        id,
                        list,
                        recordID});
            err = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void edditRecordAsync(string id, string[] list, int recordID) {
            this.edditRecordAsync(id, list, recordID, null);
        }
        
        /// <remarks/>
        public void edditRecordAsync(string id, string[] list, int recordID, object userState) {
            if ((this.edditRecordOperationCompleted == null)) {
                this.edditRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnedditRecordOperationCompleted);
            }
            this.InvokeAsync("edditRecord", new object[] {
                        id,
                        list,
                        recordID}, this.edditRecordOperationCompleted, userState);
        }
        
        private void OnedditRecordOperationCompleted(object arg) {
            if ((this.edditRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.edditRecordCompleted(this, new edditRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void doQueryCompletedEventHandler(object sender, doQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void importFromCsvCompletedEventHandler(object sender, importFromCsvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class importFromCsvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal importFromCsvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void addRecordCompletedEventHandler(object sender, addRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void edditRecordCompletedEventHandler(object sender, edditRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class edditRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal edditRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string err {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591